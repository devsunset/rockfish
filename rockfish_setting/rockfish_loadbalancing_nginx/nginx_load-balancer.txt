■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

## ■ nginx load-balancer
   
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

https://www.nginx.com/resources/admin-guide/load-balancer/

http://nginx.org/en/docs/http/ngx_http_upstream_module.html

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

서버#1  IIS 포트 80
서버#2  IIS 포트 80
서버#3  nginx 포트 80

#vi /etc/nginx/nginx.conf

user  nginx;
worker_processes  4;                      -> CPU 코어 개수만큼 설정
worker_cpu_affinity 0001 0010 0100 1000;  -> 상기 설정에 

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
  log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name  '
                         'to: $upstream_addr: $request upstream_response_time $upstream_response_time msec '
                         '$msec request_time $request_time';
  access_log  /var/log/nginx/access.log  upstreamlog;

  upstream 그룹명#1 {
    ip_hash;
    server 서버#1의IP:80 weight=1 max_fails=5 fail_timeout=15s;
    server 서버#2의IP:80 weight=5 max_fails=5 fail_timeout=15s;
  }

  server {
    listen 80;
    server_name www.example.com;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Queue-Start "t=${msec}000";

    location / {
      proxy_pass http://그룹명#1;
    }

    location /status {
      stub_status on;
      access_log off;
      allow 127.0.0.1;
      deny all;
    }
  }
}


ip_hash    
동일 사용자(요청자)에 대하여 같은 업스트림 서버로 연결되도록 한다.

weight=n
서버 가중치. 만약 5라면 1로 설정한 서버에 비하여 5배 더 자주 선택된다.

max_fails=n
설정한 값 n만큼 실패가 발생하면 서버가 죽은 것으로 간주한다.

fail_timeout=n
max_fails 가 설정된 상태에서 n 시간만큼 응답하지 않으면 죽은 것으로 간주한다.

down
해당 서버를 사용하지 않는다. ip_hash 옵션이 설정된 경우에만 유효.

backup
대기하고 있다가 설정된 모든 서버가 동작하지 않을 때 사용되는 서버.

http://saksin.tistory.com/1110

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

upstream wwwservers {
    #ip_hash;
    least_conn;

    server 192.168.1.101 max_fails=3 fail_timeout=10s;
    server 192.168.1.102 backup;
}

server {
    listen       80;
    server_name  www.example.com;

    proxy_redirect          off;
    client_max_body_size    500m;
    client_body_buffer_size 256k;

    location / {
        proxy_pass  http://wwwservers;
        proxy_set_header    Host    $http_host;
        proxy_set_header    X-Real-IP       $remote_addr;
        proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout       90;
        proxy_send_timeout          90;
        proxy_buffers               4 32k;
        proxy_temp_file_write_size  64k;
    }       
}

https://ncube.net/10835


http {
  upstream myproject {
    ip_hash;
    server 127.0.0.1:8001
    server 127.0.0.1:8000 weight=3 max_fails=3  fail_timeout=30s;
    server 127.0.0.1:8001 down;
    server 127.0.0.1:8002 max_fails=3  fail_timeout=30s;
    server 127.0.0.1:8003 max_fails=3  fail_timeout=30s;
  }
 
  server {
    listen 80;
    server_name www.domain.com;
    location / {
      proxy_pass http://myproject;
    }
  }
}

upstream myproject를 만들어서 5개의 Node가 리스닝 하고 있는 port를 적어준다. 

ip_hash
클라이언트의 ip를 해싱하여 특정 포트로만 접근하게 만든다. 예를 들면, A유저의 ip가 100.100.100.100 일때 이 ip를 해싱 8080으로만 접근하도록 한다.
(8080에 접속하는 것은 예일 뿐이다. 사실로 받아들이지 않도록) 그러나 항상 똑같은 backend로의 접속을 보장하지 않는다.
유저의 IP가 고정 IP가 아닐경우 당연히 다른 backend로 접근할 수 있다.

weight
가중치. 가중치의 값이 커질 수록 접다른 서버에 비해 더 많이 접속하게 된다. 기본 값은 1이다.

max_fails
이 옵션에 정의한 횟수만큼 통신이 실패하면 엔진엑스는 해당 서버가 작동하지 않는 것로 간주한다.
fail_timeout으로 시간 설정이 가능하며 이 시간을 넘기면 fail처리가 된다. 기본값은 1이다.

fail_timeout
초단위 설정이다. request의 처리가 fail_timeout을 넘기면 요청 실패 처리가 된다. 기본값은 10초이다.

down
해당 backend가 down되었다는 표시이며 더이상 사용되지 않는다. ip_hash 지시어를 사용할 때만 사용한다.

backup
최후의 서버를 설정한다. 모든 서버가 작동하지 않으면 backup 서버로 연결이 된다. 
반대로 하나라도 작동하는 서버가 있으면 backup은 사용되지 않는다.

server 항목에 proxy_pass 지시어 뒤에 오는 http://myproject는 upstream을 지정해주는 것이다.
그러면 해당 웹서버 80 port로 접근하면 upstream block 규칙에 의해 backend로 분할된다.


http://devsw.tistory.com/183

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


http://www.joinc.co.kr/w/man/12/proxy


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

