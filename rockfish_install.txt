■■■■■■■■■■■■■■■■■■■■■■■■■■

■■■ ROCKFISH INSTALL ■■■


■■■■■■■■■■■■■■■■■■■■■■■■■■
###   ROCKFISH 실행 프로그램 설치 및 설정 요약   ###
■■■■■■■■■■■■■■■■■■■■■■■■■■


Rockfish 프로그램이 실행 되기 위한 환경을 구성하기 위해 서는 아래 10가지 프로그램 설치가 필요 합니다.
Windows , (Linux/OS X) 모두 해당 프로그램 기본 설정 으로 설치 후 실행 가능 상태로 준비 하시면 됩니다. 

각 프로그램별 설치 및 설정 내용은하단에 우분투 14.04기준으로 예시 설명 드리며 자세한 내용은 생략 합니다. 

참고) 서버 환경 별로 설치 내용이 상이 하고 관련 설치 내용은 해당 Site 및 인터넷등에 정보가 많이
      존재 하기 때문에 생략 하도록 하겠습니다. 

- 일단 실행 시켜 구동 되는 모습 보고 싶으시면 맨 아래 쪽 Windows 버젼 예시 참고 해 주세요 ^^

------------------------------------------------

1. MongoDB
   - Default 설치 
     (Standalone 모드 설치 - shard 환경 미 구현)

     MonogoDB Shell 에서 아래 구문 실행 하여 테이블 생성

    rockfish_service_log
    rockfish_service_master
    rockfish_admin_master


    >> mongo

    use rockfish 

    # CREATE ROCKFISH_SERVICE_LOG TABLE
      db.rockfish_service_log.insert({
      "ACCESS" : {
        "ROCKFISH_SESSION_KEY" : "-",
        "ROCKFISH_ACCESS_ID" : "-",
        "ROCKFISH_IP" : "",
        "ROCKFISH_MAC" : "",
        "ROCKFISH_PHONE" : "",
        "ROCKFISH_DEVICE" : "",
        "ROCKFISH_IMEI" : "",
        "ROCKFISH_OS" : "BROWSER",
        "ROCKFISH_OS_VERSION" : "Netscape",
        "ROCKFISH_OS_VERSION_DESC" : "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.101 Safari/537.36",
        "ROCKFISH_TARGET_SERVICE" : "ROCKFISH_SETUP",
        "ROCKFISH_CLIENT_APP" : "Rockfish",
        "ROCKFISH_CLIENT_APP_VERSION" : "1.0",
        "ROCKFISH_SEND_TYPE" : "G",
        "ROCKFISH_ENCRYPT_PARAMETER" : "",
        "ROCKFISH_ENCRYPT_YN" : "N"
      },
      "REQUEST" : {
        "SETUP" : "SETUP"
      },
      "RESPONSE" : {
        "ROCKFISH_RESULT_CODE" : "S",
        "ROCKFISH_RESULT_MESSAGE" : "OK",
        "ROCKFISH_HTTP_STATUS_CODE" : 200,
        "ROCKFISH_HTTP_STATUS_MESSAGE" : "OK",
        "ROCKFISH_RESULT_JSON" : ""
      },
      "SERVICE_METHOD" : "HTTP",
      "SEND_TYPE" : "G",
      "TARGET_SERVICE" : "SETUP",
      "REQUEST_TIME" : new Date(),
      "RESPONSE_TIME" : new Date()
    })


    # CREATE ROCKFISH_SERVICE_MASTER TABLE
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_GENERAL","SERVICE_TITLE" : "ROCKFISH WEB GENERAL","SERVICE_DESC" : "Web General 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_service.jsp","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_MULTIPART","SERVICE_TITLE" : "ROCKFISH WEB MULTIPART","SERVICE_DESC" : "Web Multipart 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_upload.jsp","SERVICE_TYPE" : "M","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_DOWNLOAD","SERVICE_TITLE" : "ROCKFISH WEB DOWNLOAD","SERVICE_DESC" : "Web Download 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_download.jsp","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_DOWNLOAD_STATIC","SERVICE_TITLE" : "ROCKFISH WEB DOWNLOAD STATIC","SERVICE_DESC" : "Web Download Static 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_download_static.jsp","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})

    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_ECHO","SERVICE_TITLE" : "ROCKFISH GENERAL ECHO","SERVICE_DESC" : "Echo 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/echoRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_SELECT","SERVICE_TITLE" : "ROCKFISH GENERAL SELECT","SERVICE_DESC" : "조회 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/selectListRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_INSERT","SERVICE_TITLE" : "ROCKFISH GENERAL INSERT","SERVICE_DESC" : "입력 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/insertRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_UPDATE","SERVICE_TITLE" : "ROCKFISH GENERAL UPDATE","SERVICE_DESC" : "수정 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/updateRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_DELETE","SERVICE_TITLE" : "ROCKFISH GENERAL DELETE","SERVICE_DESC" : "삭제 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/deleteRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_MULTIPART_UPLOAD","SERVICE_TITLE" : "ROCKFISH MULTIPART UPLOAD","SERVICE_DESC" : "업로드 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/uploadRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "M","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_DOWNLOAD","SERVICE_TITLE" : "ROCKFISH GENERAL DOWNLOAD","SERVICE_DESC" : "다운로드 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/downloadRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})

    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_LOGIN","SERVICE_TITLE" : "ROCKFISH LOGIN IN","SERVICE_DESC" : "로그인 프로세스","SERVICE_URL" : "http://localhost:7777/rockfish/common/loginRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
    db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_LOGOUT","SERVICE_TITLE" : "ROCKFISH LOG OUT","SERVICE_DESC" : "로그아웃 프로세스","SERVICE_URL" : "http://localhost:7777/rockfish/common/logoutRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})


    # CREATE ROCKFISH_ADMIN_MASTER TABLE
    db.rockfish_admin_master.insert({"ID" : "rockfish", "PASSWORD" : "5b3dafec50864579", "NAME" : "rockfish", "DESC" : "Defalt rockfish console admin", "STATUS" : "Y", "REG_DATE" : new Date(),  "MOD_DATE" : new Date()})



    # MongoDB 계정 생성 
    use rockfish
    db.createUser(
        {
            user : "rockfish",
            pwd : "rockfish",
            roles :
            [
                {
                    role : "readWrite", db : "rockfish"
                }
            ]
         }
    )

    계정 추가후 mongod.exe -auth 로 실행

------------------------------------------------

2. MariaDB
   - Default 설치 

    # 계정 생성 
    -- rockfish 사용자 생성
    -- ID : rockfish
    -- PW : rockfish


    # 데이터베이스 생성 
    CREATE DATABASE IF NOT EXISTS rockfish
    USE rockfish;

    # 테이블 생성
    CREATE TABLE IF NOT EXISTS TB_ROCKFISH (
      IDX int(10) unsigned NOT NULL AUTO_INCREMENT,
      TEMP1 varchar(255) DEFAULT '0',
      TEMP2 varchar(255) DEFAULT '0',
      TEMP3 varchar(255) DEFAULT '0',
      PRIMARY KEY (IDX)
    ) ENGINE=InnoDB DEFAULT CHARSET=utf8;


    INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
      VALUES ( 'TEMP1_VALUE1','TEMP2_VALUE1','TEMP3_VALUE1');

    INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
      VALUES ( 'TEMP1_VALUE2','TEMP2_VALUE2','TEMP3_VALUE2');

    INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
      VALUES ( 'TEMP1_VALUE3','TEMP2_VALUE3','TEMP3_VALUE3');


------------------------------------------------

3. Redis
   - Default 설치 
     (Standalone 모드 설치 - Cluster 환경 미 구현)  

      # 패스워드 설정 

     redis.windows.conf or redis.conf 설정 파일 
     아래 구문 밑에 패스워드 rockfish 설정 

     # requirepass foobared

     requirepass rockfish  

------------------------------------------------

4. Nginx
   - Default 설치    

   # 설정 파일 구성 

   https://github.com/devsunset/rockfish/blob/master/rockfish_setting/rockfish_loadbalancing_nginx/nginx_load-balancer.txt

------------------------------------------------

5. Node js
   - Default 설치 

------------------------------------------------

6. Java 7 or 8
   - Default 설치 

------------------------------------------------

7. Tomcat
   - Default 설치 - zip ,tar 파일 다운 형식 설치 
     (2대 톰캣을 구동시 port 8080,8081로 설정 구성)


# server.xml      
 -    추가 옵션 ) maxPostSize="-1" URIEncoding="UTF-8"    
 -    
 -    <Connector port="8080" protocol="HTTP/1.1"    
 -               connectionTimeout="20000"    
 -               redirectPort="8443" maxPostSize="-1" URIEncoding="UTF-8"/>   
 -    
 -    
 -  #특정 ip만 접속 허용     
 -  참고) Rockfish Server 에서만 실 데이타 제공 Service 서버 접속 허용 하게    
 -          하려고 하면 아래와 같은 Tomcat 설정으로 처리 가 가능 합니다.    
 -    
 -  <!--    
 -  <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="127.0.0.1" />    
 -      
 -  org.apache.catalina.valves.RemoteAddrValve 의 속성   
 -  allow : IP주소가 여기에 쓴 정규식에 포함되지 않을 경우 모두 거부.    
 -  deny : IP주소가 여기에 쓴 정규식에 포함될 경우만 거부.   
 -  denyStatus : 거부될 경우 보낼 상태코드 : 기본값 403 포비든.    
 -  -->

catalina.bat or catalina.sh 파일에 -DLogServerPort=8080 vm 변수 추가 

 -DLogServerPort=8080 -Djava.endorsed.dirs="%JAVA_ENDORSED_DIRS%"

------------------------------------------------

8. git 설치 (Option - 설치 안해도 됨)
  - Default 설치 
    github의 rockfis source 다운로드 받기 위한 처리 

    https://github.com/devsunset/rockfish 사이트에서 zip
    파일로 다운 받아도 됨

------------------------------------------------

9. Open SSL (Option - 설치 안해도 됨)    
   - Default 설치    
   - RSA 암호화 관련 key 파일 생성 시 필요 

   key file generator  

    # Windows 기준 설명 

  # https key generate
  windows openssl use
  >> set OPENSSL_CONF=[path-to-OpenSSL-install-dir]\bin\openssl.cfg
  >> openssl genrsa -out key.pem
  >> openssl req -new -key key.pem -out csr.pem
  >> openssl x509 -req -days 9999 -in csr.pem -signkey key.pem -out cert.pem

  # rsa key generate
  windows openssl use
  >> set OPENSSL_CONF=C:\OpenSSL-Win64\bin\openssl.cfg
  >> openssl genrsa -out privkey.pem 2048
  >> openssl rsa -in privkey.pem -pubout -out pubkey.pem

------------------------------------------------

10. Android Studio & Android SDK (Option - 설치 안해도 됨)      
   - Default 설치 
   - Rockfish Client Android version 구동 시 필요 

------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■
###  ROCKFISH 실행 프로그램 설치 및 설정 예제 I  ###
■■■■■■■■■■■■■■■■■■■■■■■■■■

-----------------------------------------------------

Ubuntu 14.04 기준

-----------------------------------------------------

0. 준비 단계 - devsunset 계정 생성 및 rockfish 폴더 생성

$ su -

shell 에서 순서대로 실행

$ adduser devsunset

$ su - devsunset

$ mkdir -p rockfish/data/db
$ mkdir -p devrepo/rockfish/logs

-----------------------------------------------------

1. MongoDB 설치 및 설정 

$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 7F0CEB10

$ echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.0.list

$ sudo apt-get update

$ sudo apt-get install -y mongodb-org

$ mongod -version

$ mongod --dbpath /home/devsunset/rockfish/data/db

  # service mongod restart
  # service mongod stop
  # service mongod start

# mongo shell 실행
root로 로그인 하여 mongod 실행 후 서버 시작 되면 mongo 명령어 실행

$ mongo

mongo shell 에서 아래 구문 순차적으로 실행 

# DATEABASE 선택

use rockfish 

# CREATE ROCKFISH_SERVICE_LOG TABLE

db.rockfish_service_log.insert({"ACCESS" : "SETUP", "REQUEST" : "SETUP", "RESPONSE" : "SETUP", "SERVICE_METHOD" : "SETUP", "SEND_TYPE" : "SETUP", "TARGET_SERVICE" : "SETUP", "REQUEST_TIME" : new Date(),  "RESPONSE_TIME" : new Date()})


# CREATE ROCKFISH_SERVICE_MASTER TABLE

db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_GENERAL","SERVICE_TITLE" : "ROCKFISH WEB GENERAL","SERVICE_DESC" : "Web General 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_service.jsp","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_MULTIPART","SERVICE_TITLE" : "ROCKFISH WEB MULTIPART","SERVICE_DESC" : "Web Multipart 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_upload.jsp","SERVICE_TYPE" : "M","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_DOWNLOAD","SERVICE_TITLE" : "ROCKFISH WEB DOWNLOAD","SERVICE_DESC" : "Web Download 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_download.jsp","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_W_DOWNLOAD_STATIC","SERVICE_TITLE" : "ROCKFISH WEB DOWNLOAD STATIC","SERVICE_DESC" : "Web Download Static 호출","SERVICE_URL" : "http://localhost:7777/rockfishweb/rockfish_download_static.jsp","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})

db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_ECHO","SERVICE_TITLE" : "ROCKFISH GENERAL ECHO","SERVICE_DESC" : "Echo 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/echoRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_SELECT","SERVICE_TITLE" : "ROCKFISH GENERAL SELECT","SERVICE_DESC" : "조회 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/selectListRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_INSERT","SERVICE_TITLE" : "ROCKFISH GENERAL INSERT","SERVICE_DESC" : "입력 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/insertRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_UPDATE","SERVICE_TITLE" : "ROCKFISH GENERAL UPDATE","SERVICE_DESC" : "수정 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/updateRockfish.do","SERVICE_TYPE" : "G","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_DELETE","SERVICE_TITLE" : "ROCKFISH GENERAL DELETE","SERVICE_DESC" : "삭제 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/deleteRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_MULTIPART_UPLOAD","SERVICE_TITLE" : "ROCKFISH MULTIPART UPLOAD","SERVICE_DESC" : "업로드 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/uploadRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "M","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_GENERAL_DOWNLOAD","SERVICE_TITLE" : "ROCKFISH GENERAL DOWNLOAD","SERVICE_DESC" : "다운로드 호출","SERVICE_URL" : "http://localhost:7777/rockfish/common/downloadRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "D","REG_DATE" : new Date(),"MOD_DATE" : new Date()})

db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_LOGIN","SERVICE_TITLE" : "ROCKFISH LOGIN IN","SERVICE_DESC" : "로그인 프로세스","SERVICE_URL" : "http://localhost:7777/rockfish/common/loginRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "N","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})
db.rockfish_service_master.insert({"SERVICE_APP" : "ROCKFISH_APP" ,"SERVICE" : "ROCKFISH_LOGOUT","SERVICE_TITLE" : "ROCKFISH LOG OUT","SERVICE_DESC" : "로그아웃 프로세스","SERVICE_URL" : "http://localhost:7777/rockfish/common/logoutRockfish.do","SERVICE_PROTOCOL" : "HTTP","SERVICE_METHOD" : "POST", "SERVICE_STATUS" : "Y","SERVICE_LOGIN_CHECK" : "Y","SERVICE_TYPE" : "G","REG_DATE" : new Date(),"MOD_DATE" : new Date()})


# CREATE ROCKFISH_ADMIN_MASTER TABLE

db.rockfish_admin_master.insert({"ID" : "rockfish", "PASSWORD" : "5b3dafec50864579", "NAME" : "rockfish", "DESC" : "Defalt rockfish console admin", "STATUS" : "Y", "REG_DATE" : new Date(),  "MOD_DATE" : new Date()})


# MongoDB 계정 생성 
  db.createUser(
      {
    user : "rockfish",
    pwd : "rockfish",
    roles :
    [
        {
            role : "readWrite", db : "rockfish"
        }
    ]
       }
  )


위의 설정 후에는로 아래 구문으로 MongoDB 시작

mongod -auth --dbpath /home/devsunset/rockfish/data/db

-----------------------------------------------------

2. MariaDB 설치 및 설정

sudo apt-get install mariadb-server

설치시 root 패스워드 입력 물어 보면 편의상 rockfish 로 설정

mysql -uroot -p

create database rockfish;

create user 'rockfish'@'%' identified by 'rockfish';
grant all privileges on rockfish.* to rockfish@'%';
flush privileges; 


mysql -u rockfish -p

show databases;

use rockfish;

CREATE TABLE IF NOT EXISTS TB_ROCKFISH (
  IDX int(10) unsigned NOT NULL AUTO_INCREMENT,
  TEMP1 varchar(255) DEFAULT '0',
  TEMP2 varchar(255) DEFAULT '0',
  TEMP3 varchar(255) DEFAULT '0',
  PRIMARY KEY (IDX)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
  VALUES ( 'TEMP1_VALUE1','TEMP2_VALUE1','TEMP3_VALUE1');

INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
  VALUES ( 'TEMP1_VALUE2','TEMP2_VALUE2','TEMP3_VALUE2');

INSERT INTO TB_ROCKFISH  ( TEMP1,TEMP2,TEMP3 )
  VALUES ( 'TEMP1_VALUE3','TEMP2_VALUE3','TEMP3_VALUE3');
      

SELECT * FROM TB_ROCKFISH;

-----------------------------------------------------

3. Redis 설치 및 설정

$ sudo apt-get install -y python-software-properties
$ sudo add-apt-repository -y ppa:rwky/redis
$ sudo apt-get update

# redis 설치
$ sudo apt-get install -y redis-server

# password 설정
vi /etc/redis/redis.conf 파일 내용 수정 

# requirepass foobared  주석 부분 하단에 requirepass 비밀번호

requirepass rockfish 

# redis start
$ sudo /usr/bin/redis-server /etc/redis/redis.conf

-----------------------------------------------------

4. Nginx 설치 및 설정

$ sudo apt-get update
$ sudo apt-get install nginx

Documnet Root
/usr/share/nginx/html

설정파일
/etc/nginx/

로그파일 
/var/log/nginx

설정적용

https://github.com/devsunset/rockfish/tree/master/rockfish_setting/rockfish_loadbalancing_nginx

vi /etc/nginx/nginx.conf


        # ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        # HTTP SERVER
        # ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        # ■ nginx load-balancer guide ■
        # ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
        # https://www.nginx.com/resources/admin-guide/load-balancer/
        # http://nginx.org/en/docs/http/ngx_http_upstream_module.html
        # ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

        #user  nginx;
        #CPU 코어 개수만큼 설정
        worker_processes  4;
        # worker_cpu_affinity 0001 0010 0100 1000;

        # Error Log 설정
        error_log /home/devsunset/devrepo/rockfish/logs/nginx_error.log;

        # pid 설정
        pid /home/devsunset/devrepo/rockfish/logs/nginx.pid;

        events {
            worker_connections  1024;
        }

        http {
          # log 포맷과 access_log 설정 
          log_format upstreamlog '[$time_local] $remote_addr - $remote_user - $server_name  '
                                 'to: $upstream_addr: $request upstream_response_time $upstream_response_time msec '
                                 '$msec request_time $request_time';
                     
            access_log  /home/devsunset/devrepo/rockfish/logs/nginx_access.log  upstreamlog;    
            
          upstream rockfish#1 {
            
          ############################################################################################
          # 설정안함   : 라운드로빈(Round-robin)은 기본으로 사용하는 메서드로 모든 서버에 동등하게 요청을 분산한다.
          # least_conn : 연결이 가장 작은 서버로 요청을 보낸다. 
          # ip_hash    : 클라이언트 IP주소를 기준으로 요청을 분배한다. IP주소가 같다면, 동일한 서버로 요청을 전송한다.
          # hash       : 유저가 정의한 key나 변수 혹은 이들의 조합을 해시해서 분산한다. key로 소스 IP나 포트 URI 등을 사용 할 수 있다. 
          #          hash는 consistent파라메터를 사용 할 수 있다. consistent를 사용하면 Ketama 컨시스턴시 해시 알고리즘을 이용해서 
          #          upstream 그룹에 서버가 추가 되거나 삭제 될 때, 키의 분배를 최소화 함으로써 캐시 실패를 줄일 수 있다. ex)  hash $request_uri consistent;
          # least_time : 메서드는 NginX Plus에서 지원한다. 평균 레이턴시와 연결을 기준으로 검사해서 로드가 적은 서버로 요청을 보낸다. ex) least_time header; 
          ############################################################################################
            
            server 127.0.0.1:8080 weight=5 max_fails=5 fail_timeout=15s;
            server 127.0.0.1:8081 weight=5 max_fails=5 fail_timeout=15s;
          #server 127.0.0.1:8082 weight=5 max_fails=5 fail_timeout=15s;
          #server 127.0.0.1:8083 down;
          #server 127.0.0.1:8084 backup;
          
          keepalive 1000;
          }

          server {
            listen 7777;
            server_name www.rockfish.com;
               
           proxy_set_header Host $host;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
             proxy_set_header X-Queue-Start "t=${msec}000";
           
           # client 에서 custom Header 값 추가 한 내용 전달 하기 위한 옵션 (중요)
           underscores_in_headers on;  
          
            location / {
              proxy_pass http://rockfish#1;
            }

            location /status {
              stub_status on;
              access_log off;
              allow 127.0.0.1;
              deny all;
            }
          }
          
          ############################################################################################
          # ip_hash    
          # 동일 client 에 대하여 같은 업스트림 서버로 연결 되도록 한다.
          # 클라이언트의 ip를 해싱하여 특정 포트로만 접근하게 만든다. 그러나 항상 똑같은 backend로의 접속을 보장하지 않는다.
          # 유저의 IP가 고정 IP가 아닐경우 당연히 다른 backend로 접근할 수 있다.

          # weight=n
          # 가중치. 가중치의 값이 커질 수록 접다른 서버에 비해 더 많이 접속하게 된다. 기본 값은 1이다.

          # max_fails
          # 이 옵션에 정의한 횟수만큼 통신이 실패하면 엔진엑스는 해당 서버가 작동하지 않는 것로 간주한다.
          # fail_timeout으로 시간 설정이 가능하며 이 시간을 넘기면 fail처리가 된다. 기본값은 1이다.

          # fail_timeout=n
          # max_fails 가 설정된 상태에서 n 시간만큼 응답하지 않으면 죽은 것으로 간주한다.
          # 초단위 설정이다. request의 처리가 fail_timeout을 넘기면 요청 실패 처리가 된다. 기본값은 10초이다.

          # down
          # 해당 서버를 사용하지 않는다. ip_hash 옵션이 설정된 경우에만 유효.

          # backup
          # 최후의 서버를 설정한다. 모든 서버가 작동하지 않으면 backup 서버로 연결이 된다. 
          # 반대로 하나라도 작동하는 서버가 있으면 backup은 사용되지 않는다.
          ############################################################################################
            
            # HTTPS server
            #
            #server {
            #    listen       443 ssl;
            #    server_name  localhost;

            #    ssl_certificate      cert.pem;
            #    ssl_certificate_key  cert.key;

            #    ssl_session_cache    shared:SSL:1m;
            #    ssl_session_timeout  5m;

            #    ssl_ciphers  HIGH:!aNULL:!MD5;
            #    ssl_prefer_server_ciphers  on;

            #    location / {
            #        root   html;
            #        index  index.html index.htm;
            #    }
            #}
        }



sudo service nginx start
sudo service nginx stop
sudo service nginx restart
OR
sudo /etc/init.d/nginx start
sudo /etc/init.d/nginx stop
sudo /etc/init.d/nginx restart


-----------------------------------------------------

5. Node js 설치

$ sudo apt-get install curl
$ curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
$ sudo apt-get install -y nodejs

-----------------------------------------------------

6. java 7 or 8 설치 

# OpenJDK 제거
$ sudo apt-get purge openjdk*
 

# repository 추가
$ sudo add-apt-repository ppa:webupd8team/java
 

# repository index 업데이트
$ sudo apt-get update
 

# JDK 설치
- Java 8 설치
$ sudo apt-get install oracle-java8-installer
- Java 7 설치
$ sudo apt-get install oracle-java7-installer
- Java 6 설치
$ sudo apt-get install oracle-java6-installer


우분투 설치 시 기본 설치되어 있는 자바 그대로 사용 예정 별도 설치 안함 

$ java -version
java version "1.7.0_75"
OpenJDK Runtime Environment (IcedTea 2.5.4) (7u75-2.5.4-1~trusty1)
OpenJDK 64-Bit Server VM (build 24.75-b04, mixed mode)

-----------------------------------------------------

7. Tomcat 설치 및 설정

cd /home/devsunset/rockfish/

톰캣 2대 설치 

wget http://apache.mirror.cdnetworks.com/tomcat/tomcat-7/v7.0.70/bin/apache-tomcat-7.0.70.tar.gz -O tomcat-7.0.70.tar.gz

tar -zxvf tomcat-7.0.70.tar.gz

첫번째 8080 포트 사용 하는 톰캣 설정 

설정 파일 수정 
vi /home/devsunset/rockfish/apache-tomcat-7.0.70/conf/server.xml

# server.xml      
 -    추가 옵션 ) maxPostSize="-1" URIEncoding="UTF-8"    
 -    
 -    <Connector port="8080" protocol="HTTP/1.1"    
 -               connectionTimeout="20000"    
 -               redirectPort="8443" maxPostSize="-1" URIEncoding="UTF-8"/>   
 -    
 -    
 -  #특정 ip만 접속 허용     
 -  참고) Rockfish Server 에서만 실 데이타 제공 Service 서버 접속 허용 하게    
 -          하려고 하면 아래와 같은 Tomcat 설정으로 처리 가 가능 합니다.    
 -    
 -  <!--    
 -  <Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="127.0.0.1" />    
 -      
 -  org.apache.catalina.valves.RemoteAddrValve 의 속성   
 -  allow : IP주소가 여기에 쓴 정규식에 포함되지 않을 경우 모두 거부.    
 -  deny : IP주소가 여기에 쓴 정규식에 포함될 경우만 거부.   
 -  denyStatus : 거부될 경우 보낼 상태코드 : 기본값 403 포비든.    
 -  -->


catalina.sh 파일에 -DLogServerPort=8080 vm 변수 추가 

-DLogServerPort=8080 -Djava.endorsed.dirs="%JAVA_ENDORSED_DIRS%"

cp -R apache-tomcat-7.0.70 apache-tomcat-7.0.70_8080


두번째 8081 포트 사용 하는 톰캣 설정 

설정 파일 수정 
vi /home/devsunset/rockfish/apache-tomcat-7.0.70/conf/server.xml

server.xml 파일 내용 port 값을 모두 +1 처리한 값으로 수정 한다.
톰캣 2개 동시 한 서버에서 기동 시 port 충돌 방지 하기 위함

ex) 8080 -> 8081  , 8443 -> 8444 ....

catalina.sh 파일에 -DLogServerPort=8081 vm 변수 추가 

-DLogServerPort=8081 -Djava.endorsed.dirs="%JAVA_ENDORSED_DIRS%"


수정 완료 후 

mv apache-tomcat-7.0.70 apache-tomcat-7.0.70_8081


-----------------------------------------------------

8. git 설치 및 설정

$ sudo apt install git

-----------------------------------------------------

9. Open SSL (Option - 설치 안해도 됨)    
   - 생략 

-----------------------------------------------------

10. Android Studio & Android SDK (Option - 설치 안해도 됨)      
   - 생략

-----------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■
###  ROCKFISH 소스 다운로드 설치 ###
■■■■■■■■■■■■■■■■■■■■■■■■■■

아래 경로에서 zip 파일로 다운 
https://github.com/devsunset/rockfish
or 
git clone https://github.com/devsunset/rockfish.git

zip 파일인 경우 압축 해제 하면 아래와 같은 디렉토리 존재
해당 디렉토리 모두 /home/devsunset/rockfish 로 이동  

rockfish_client
rockfish_console
rockfish_server
rockfish_service
rockfish_setting

rockfish_service/rockfish_service_spring/rockfish.war 
파일을 복사 하여 Tomcat 설치한 두대 WebApp에 각각 복사 

rockfish_console/rockfish_console_nodejs 폴더로 이동후 
쉘 창에서 npm install 명령어 실행하여 node_modules 설치 

rockfish_service/home/devsunset/devrepo/rockfish 폴더를 

/home/devsunset/devrepo/ 경로에 복사 


1. MongoDB 시작 ( mongod -auth --dbpath /home/devsunset/rockfish/data/db )

2. MariaDB 시작 

3. Redis 시작 ( sudo /usr/bin/redis-server /etc/redis/redis.conf )

4. Tomcat 각각 시작 start.sh 

5. rockfish_server/rockfish_server_nodejs/ 경로 에서 node rockfish_index.js 명령어로 서버 시작 

6. rockfish_console/rockfish_console_nodejs/ 경로 에서 npm start 명령어로 콘솔 시작 

   http://localhost:3000/ 로 접속 ID/PW (rockfish/rockfish)

   rockfish_client/rockfish_client_web/rockfish_client_web.html 파일 브라우저에서 실행 후
   버튼 클릭 하여 실행 후 콘솔 상에서 서버와 통신 로그 확인 ^^


■■■■■■■■■■■■■■■■■■■■■■■■■■
###  ROCKFISH 실행 프로그램 설치 및 설정 예제 II ###
■■■■■■■■■■■■■■■■■■■■■■■■■■

-----------------------------------------------------

Windows7 기준

-----------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■
 Easy Simple 컨셉에 안맞게 설치 및 설정이 복잡해 졌네요 

 그래서 zip파일로 모든 내용을 압축 하였습니다. 
 다운받아 C:\ 경로에 압축만 해제 하면 설치 끝 ^^
 프로그램 설치 및 설정 등 모두 포함 되어 있습니다.

 압축 용량 1G 여서 파일 올리는 곳 찾고 있습니다.
 공유 되면 링크 수정 하겠습니다.


 (참고 - zip파일로 다운로드 시 rockfish_console/rockfish_console_nodejs
       모듈 파일 경로가 길어 압축 해제 시 오류 발생)

  Windows 에서는 반디집 (무료 압축 파일 - 개인/기업 모두 사용 가능) 사용 하여
  압축 해제 하시기 바랍니다.   
  
  
  압축 해제후 
  rockfish_service\home 디렉토리를 C:\ 경로에 복사 하세요.
  
  아래 배치 파일 실행하면 rockfish 프로그램 시작 됨
  
  (기존 설치 프로그램이 존재한다면 시작 시 포트 충돌 발생할 경우 있음)
  (기존 서비스 종료 후 테스트 하거나 설치 프로그램 포트 변경 후 실행)
  
  C:\rockfish\runWindows\rockfish.bat    

  http://localhost:3000/ 로 접속 ID/PW (rockfish/rockfish)

   rockfish_client/rockfish_client_web/rockfish_client_web.html 파일 브라우저에서 실행 후
   버튼 클릭 하여 실행 후 콘솔 상에서 서버와 통신 로그 확인 ^^
 
■■■■■■■■■■■■■■■■■■■■■■■■■■











